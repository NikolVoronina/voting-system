const { Client } = require('pg');

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const client = new Client({
  host: 'localhost',
  port: 5432,  // –ü–æ—Ä—Ç –¥–ª—è PostgreSQL
  user: 'postgres',
  password: '1q2w',  
  database: 'voting-system'
});

client.connect();

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–æ–¥–∞ (6 —Å–∏–º–≤–æ–ª–æ–≤)
async function generateRandomCode(length = 6) {
  const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
  let code = '';
  for (let i = 0; i < length; i++) {
    code += characters.charAt(Math.floor(Math.random() * characters.length));
  }
  return code;
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è (–æ—Ç 1980 –¥–æ 2005 –≥–æ–¥–∞), –º–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ –¥–µ–Ω—å –∏ –º–µ—Å—è—Ü
function generateRandomBirthDate() {
  const startYear = 1980;
  const endYear = 2005;

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –¥–µ–Ω—å, –º–µ—Å—è—Ü –∏ –≥–æ–¥
  const randomYear = Math.floor(Math.random() * (endYear - startYear + 1)) + startYear;
  const randomMonth = Math.floor(Math.random() * 12); // –ú–µ—Å—è—Ü –æ—Ç 0 –¥–æ 11
  const daysInMonth = new Date(randomYear, randomMonth + 1, 0).getDate(); // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –º–µ—Å—è—Ü–µ
  const randomDay = Math.floor(Math.random() * daysInMonth) + 1; // –°–ª—É—á–∞–π–Ω—ã–π –¥–µ–Ω—å

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–ú–µ—Å—è—Ü-–î–µ–Ω—å-–ì–æ–¥"
  const birthDate = new Date(randomYear, randomMonth, randomDay)
    .toISOString()
    .split('T')[0];

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ "MM-DD-YYYY"
  return `${birthDate.split('-')[1]}-${birthDate.split('-')[2]}-${birthDate.split('-')[0]}`;
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
async function addCodeToDatabase(code, birthDate) {
  try {
    const result = await client.query('SELECT * FROM voters WHERE code = $1', [code]);
    if (result.rows.length === 0) {
      await client.query('INSERT INTO voters (code, birth_date, used) VALUES ($1, $2, FALSE)', [code, birthDate]);
      console.log(`‚úÖ –ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω: ${code}, –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: ${birthDate}`);
      return true;
    } else {
      console.log(`‚ö†Ô∏è –ö–æ–¥ ${code} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π.`);
      return false;
    }
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –±–∞–∑—É:', err);
    return false;
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–æ–¥–æ–≤ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É
async function addCodes(count = 10) {
  try {
    let addedCount = 0;

    while (addedCount < count) {
      const code = await generateRandomCode(); // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞
      const birthDate = generateRandomBirthDate(); // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
      const success = await addCodeToDatabase(code, birthDate);
      if (success) {
        addedCount++;
      }
    }

    console.log('üéâ –í—Å–µ –∫–æ–¥—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!');
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–¥–æ–≤:', err);
  } finally {
    await client.end();
  }
}

// –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–æ–≤
addCodes(10);
